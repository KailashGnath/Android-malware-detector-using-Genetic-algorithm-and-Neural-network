
#(Simple Artificial Neural Network)
from keras.models import Sequential, Model
from keras.layers import Dense, Dropout, Activation, Embedding, LSTM
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix 
import pickle
import numpy as np
from sklearn.preprocessing import LabelEncoder
data=pd.read_csv("android_dataset-v1.csv")
Y = data['class']
X = data.drop(['class'], axis=1)

encoder = LabelEncoder().fit(Y)
Y = encoder.transform(Y)
print(encoder.transform(['malign']))
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2)
AN = Sequential()
AN.add(Dense(256, activation='relu', input_dim=409))
AN.add(Dropout(0.2))
AN.add(Dense(128, activation='relu'))
AN.add(Dropout(0.2))
AN.add(Dense(128, activation='relu'))
AN.add(Dropout(0.2))
AN.add(Dense(32, activation='relu'))
AN.add(Dropout(0.2))
AN.add(Dense(1, activation='sigmoid'))
AN.compile(optimizer='sgd', loss='binary_crossentropy', metrics=['accuracy'])

AN.fit(X_train, y_train, epochs=100, batch_size=32)# ANN train model


scores = AN.evaluate(X_test, y_test)
for i in range(len(scores)):
  print("\n%s: %.2f%%" % (AN.metrics_names[i], scores[i]*100))
from androguard.core.bytecodes.apk import APK

def predict(apk):
  vector = {}
  a = APK(apk)
  perm = a.get_permissions()
  print(perm)
  for d in perms:
    if d in perm:
      vector[d]=1
    else:
      vector[d]=0
  input = [ v for v in vector.values() ]
  print(input)
  print(AN.predict([[input]]))
pickle.dump(grid, open('ann_new.pkl', 'wb'))
